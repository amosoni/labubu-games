{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/[locale]",
      "regex": "^/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPlocale": "nxtPlocale"
      },
      "namedRegex": "^/(?<nxtPlocale>[^/]+?)(?:/)?$"
    },
    {
      "page": "/[locale]/about",
      "regex": "^/([^/]+?)/about(?:/)?$",
      "routeKeys": {
        "nxtPlocale": "nxtPlocale"
      },
      "namedRegex": "^/(?<nxtPlocale>[^/]+?)/about(?:/)?$"
    },
    {
      "page": "/[locale]/community",
      "regex": "^/([^/]+?)/community(?:/)?$",
      "routeKeys": {
        "nxtPlocale": "nxtPlocale"
      },
      "namedRegex": "^/(?<nxtPlocale>[^/]+?)/community(?:/)?$"
    },
    {
      "page": "/[locale]/favorites",
      "regex": "^/([^/]+?)/favorites(?:/)?$",
      "routeKeys": {
        "nxtPlocale": "nxtPlocale"
      },
      "namedRegex": "^/(?<nxtPlocale>[^/]+?)/favorites(?:/)?$"
    },
    {
      "page": "/[locale]/game",
      "regex": "^/([^/]+?)/game(?:/)?$",
      "routeKeys": {
        "nxtPlocale": "nxtPlocale"
      },
      "namedRegex": "^/(?<nxtPlocale>[^/]+?)/game(?:/)?$"
    },
    {
      "page": "/[locale]/games",
      "regex": "^/([^/]+?)/games(?:/)?$",
      "routeKeys": {
        "nxtPlocale": "nxtPlocale"
      },
      "namedRegex": "^/(?<nxtPlocale>[^/]+?)/games(?:/)?$"
    },
    {
      "page": "/[locale]/games/[gameId]",
      "regex": "^/([^/]+?)/games/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPlocale": "nxtPlocale",
        "nxtPgameId": "nxtPgameId"
      },
      "namedRegex": "^/(?<nxtPlocale>[^/]+?)/games/(?<nxtPgameId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/[locale]/notifications",
      "regex": "^/([^/]+?)/notifications(?:/)?$",
      "routeKeys": {
        "nxtPlocale": "nxtPlocale"
      },
      "namedRegex": "^/(?<nxtPlocale>[^/]+?)/notifications(?:/)?$"
    },
    {
      "page": "/[locale]/play/[gameId]",
      "regex": "^/([^/]+?)/play/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPlocale": "nxtPlocale",
        "nxtPgameId": "nxtPgameId"
      },
      "namedRegex": "^/(?<nxtPlocale>[^/]+?)/play/(?<nxtPgameId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/[locale]/profile",
      "regex": "^/([^/]+?)/profile(?:/)?$",
      "routeKeys": {
        "nxtPlocale": "nxtPlocale"
      },
      "namedRegex": "^/(?<nxtPlocale>[^/]+?)/profile(?:/)?$"
    },
    {
      "page": "/[locale]/users",
      "regex": "^/([^/]+?)/users(?:/)?$",
      "routeKeys": {
        "nxtPlocale": "nxtPlocale"
      },
      "namedRegex": "^/(?<nxtPlocale>[^/]+?)/users(?:/)?$"
    },
    {
      "page": "/[locale]/users/[userId]",
      "regex": "^/([^/]+?)/users/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPlocale": "nxtPlocale",
        "nxtPuserId": "nxtPuserId"
      },
      "namedRegex": "^/(?<nxtPlocale>[^/]+?)/users/(?<nxtPuserId>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/robots.txt",
      "regex": "^/robots\\.txt(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/robots\\.txt(?:/)?$"
    },
    {
      "page": "/sitemap.xml",
      "regex": "^/sitemap\\.xml(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/sitemap\\.xml(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}